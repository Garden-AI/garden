name: ETE Test Full

on:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *"    #runs at 12:00 UTC everyday

jobs:
  get-latest-tag:
    runs-on: ubuntu-latest
    outputs:
      latest-tag: ${{steps.get-latest-tag-step.outputs.tag}}
    steps:
      - uses: actions/checkout@v2
      - name: "action get latest tag"
        id: get-latest-tag-step
        uses: actions-ecosystem/action-get-latest-tag@v1
  build_one:
    runs-on: ubuntu-latest
    needs: get-latest-tag
    strategy:
      matrix:
        python-version: ["3.8"]
        repository-ref: ["max/ete-fixes"]
      fail-fast: false
      max-parallel: 1
    name: build_one
    env:
      GARDEN_API_CLIENT_ID: ${{ secrets.GARDEN_API_CLIENT_ID }}
      GARDEN_API_CLIENT_SECRET: ${{ secrets.GARDEN_API_CLIENT_SECRET }}
      SLACK_HOOK_URL: ${{ secrets.SLACK_HOOK_URL }}
      ETE_ART_LOC: "/home/runner/ete_artifact"
      ETE_ART_NAME: "ete-artifact-${{ GITHUB_RUN_ID }}"
      ETE_JOB_ID: "ETE_RUN_ID_NOT_SET"
      ETE_JOB_ID_FAILED: "ETE_RUN_ID_NOT_SET"
    steps:
      - name: checkout repo content
        uses: actions/checkout@v2
        with:
            ref: ${{ matrix.repository-ref }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.2.2
      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false && \
          poetry install --no-interaction --no-ansi --with=test,develop --all-extras
      - name: Set external job name
        run: echo "GITHUB_JOB_NAME_EXT=full build (${{ matrix.python-version }}, ${{ matrix.repository-ref }})" >> $GITHUB_ENV
      - name: Set internal job name
        run: echo "GITHUB_JOB_NAME_INT=build_one (${{ matrix.python-version }}, ${{ matrix.repository-ref }})" >> $GITHUB_ENV
      - name: Run full ETE test
        id: full_test
        continue-on-error: true
        working-directory: ./tests/ete
        run: python3 test_end_to_end.py run-garden-end-to-end --garden-grant cc --model-type all --globus-compute-endpoint 86a47061-f3d9-44f0-90dc-56ddc642c000 --live-print-stdout
        timeout-minutes: 90
      - name: Make artifact file
        if: "!contains(env.ETE_JOB_ID, env.ETE_JOB_ID_FAILED)"
        run: |
          mkdir -p ${{ env.ETE_ART_LOC }}
          echo ${{ env.ETE_OUT }} > ${{ env.ETE_ART_LOC }}/${{ env.ETE_JOB_ID }}.txt
      - name: Upload artifact
        if: "!contains(env.ETE_JOB_ID, env.ETE_JOB_ID_FAILED)"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ETE_ART_NAME }}
          path: ${{ env.ETE_ART_LOC }}/${{ env.ETE_JOB_ID }}.txt
          retention-days: 3
  build_two:
    runs-on: ubuntu-latest
    needs: [get-latest-tag, build_one]
    strategy:
      matrix:
        python-version: ["3.9"]
        repository-ref: ["max/ete-fixes"]
      fail-fast: false
      max-parallel: 90
    name: build_two
    env:
      GARDEN_API_CLIENT_ID: ${{ secrets.GARDEN_API_CLIENT_ID }}
      GARDEN_API_CLIENT_SECRET: ${{ secrets.GARDEN_API_CLIENT_SECRET }}
      SLACK_HOOK_URL: ${{ secrets.SLACK_HOOK_URL }}
      ETE_ART_LOC: "/home/runner/ete_artifact"
      ETE_ART_NAME: "ete-artifact-${{ GITHUB_RUN_ID }}"
      ETE_JOB_ID: "None"
    steps:
      - name: checkout repo content
        uses: actions/checkout@v2
        with:
            ref: ${{ matrix.repository-ref }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.2.2
      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false && \
          poetry install --no-interaction --no-ansi --with=test,develop --all-extras
      - name: Set external job name
        run: echo "GITHUB_JOB_NAME_EXT=full build (${{ matrix.python-version }}, ${{ matrix.repository-ref }})" >> $GITHUB_ENV
      - name: Set internal job name
        run: echo "GITHUB_JOB_NAME_INT=build_two (${{ matrix.python-version }}, ${{ matrix.repository-ref }})" >> $GITHUB_ENV
      - name: Run full ETE test
        id: full_test
        continue-on-error: true
        working-directory: ./tests/ete
        run: python3 test_end_to_end.py run-garden-end-to-end --garden-grant cc --model-type all --globus-compute-endpoint 86a47061-f3d9-44f0-90dc-56ddc642c000 --live-print-stdout
        timeout-minutes: 90
      - name: Make artifact file
        if: "!contains(env.ETE_JOB_ID, env.ETE_JOB_ID_FAILED)"
        run: |
          mkdir -p ${{ env.ETE_ART_LOC }}
          echo ${{ env.ETE_OUT }} > ${{ env.ETE_ART_LOC }}/${{ env.ETE_JOB_ID }}.txt
      - name: Upload artifact
        if: "!contains(env.ETE_JOB_ID, env.ETE_JOB_ID_FAILED)"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ETE_ART_NAME }}
          path: ${{ env.ETE_ART_LOC }}/${{ env.ETE_JOB_ID }}.txt
          retention-days: 3
  collect:
    runs-on: ubuntu-latest
    needs: [build_one, build_two]
    if: always()

    strategy:
      matrix:
        python-version: ["3.8"]
        repository-ref: ["max/ete-fixes"]
      max-parallel: 1
    name: collect-and-send-logs
    env:
      SLACK_HOOK_URL: ${{ secrets.SLACK_HOOK_URL }}
      ETE_ART_LOC: "/home/runner/ete_artifact"
      ETE_ART_NAME: "ete-artifact-${{ GITHUB_RUN_ID }}"
    steps:
      - name: checkout repo content
        uses: actions/checkout@v2
        with:
            ref: ${{ matrix.repository-ref }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.2.2
      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false && \
          poetry install --no-interaction --no-ansi --with=test,develop
      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: ${{ env.ETE_ART_NAME }}
          path: ${{ env.ETE_ART_LOC }}
      - name: Collect and send logs to slack
        working-directory: ./tests/ete
        run: python3 test_end_to_end.py collect-and-send-logs --run-type full
        timeout-minutes: 10
